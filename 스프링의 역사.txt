스프링의 역사

- 2002년 로드 존슨(MVC)
- 정식등록 : 2004녀 4월

----------------------------------------------------------------------------------------

버전
2004년 3월 : 1.x
2006년 10월 : 2.x
2009년 12월 : 3.x
2014년 4월 : 4.x
2017년 9월 : 5.x

2006년부터 SSH라는 용어를 사용

S : spring
S : struts
H : 하이버네이트

----------------------------------------------------------------------------------------

2013년 이후 스트럿츠 2.3버전을 기준으로 서비스 종료

전자정부프레임워크는 스프링 3.0을 기반으로 구축

초기에 스프링 서브 프로젝트로 화면 전환의 흐름을 관리하는 스프링 웹플로가 있었고,
그 후로 인증/허가 처리를 관리하는 스프링 시큐리티등이 추가 됨
일괄 처리용의 스프링 배치가 출시됨

최근에느느 애플리케이션 개발을 간단하게 해주는 
스프링 부트가 주목을 받게 됨

----------------------------------------------------------------------------------------

스프링 설정 방법

1.0 ~ 3.0 버전에는 Spring Legacy Project(현업에서 가장 많이 사용)
- 기본 페이지로 jsp 페이지 사용

4.0 ~ 버전 Spring Boot(최신기술) 
- 설정을 최소화
- jsp 페이지가 아닌 기본 템플릿을 사용

----------------------------------------------------------------------------------------

HTML(정적) -> CGI(ASP) -> 서블릿, JSP -> EJB -> 스프링

현재에는 Ajax로 웹 브라우저에 풍부한 화면을 구현함

Ajax란?
- 자바스크립트의 비동기 통신(XMLHttpRequest)을 사용해서 웹 브라우저의 화면 이동없이
화면 일부를 변경하는 기술
- 화면의 편리성을 향상
- 대표적으로 Google의 map의 화면 이동이나 지도상에서 상점 정보를 표시하는 것 등이 있음

----------------------------------------------------------------------------------------

Model1
- 웹 브라우저의 요청을 JSP 가 담당
- JSP가 요청을 받고 해당 요청에 대해서 처리를 위해 빈즈와 통신
- 빈즈가 처리 결과를 주면 그것을 클라이언트에 전달
- 장점 : 구조간단, 개발이 쉬움, 개발기간이 짧음
- 단점 : 유지보수가 어려움, 개발자와 디자이너가 말이 잘 통해야 함


Model2 방식
- 클라이언트와 JSP 사이에 컨트롤러가 끼어듬
- 요청을 컨트롤러(서블릿)에서 처리
- 요청에 따른 처리를 위해 빈즈와 통신
- 응답할 JSP 선택할 수 있음
- 장점 : 컨트롤러와 뷰의 분리로 유지 보수가 좋음, 개발자와 디자이너의 역할 분담
- 단점 : 높은 수준의 이해도 필요, 설계에 많은 투자, 개발 기간이 김

선택
규모가 작고 유지보수가 적으면 model1 방식 선택
규모가 크고 유지보수가 많으면 model2 방식 선택


MVC

Model : 테이터 생성, 저장, 처리
View : 결과를 보여주고 입력을 받은 화면을 구성
Controller : 입력의 흐름 제어/요청을 model에게, model의 결과를 view에 전달해주는 역할

redirect 와 dispatcher의 차이점

redirect : 페이지 이동시 주소가 변함
dispatcher : 페이지 이동시 기존 페이지에서 변함

----------------------------------------------------------------------------------------

자바를 이용해서 어플리케이션을 개발할 때 메이븐과 그래드 같은 빌드 도구를 사용
이런 빌드 도구의 주요 특징 중 하나는 의존 모듈(jar)관리에 있음

메이븐의 경우 중앙 리파지터리라고 불리는 서버로 부터 필요한 jar파일을 다운 받아 처리

----------------------------------------------------------------------------------------

Spring 개발 환경 설정

- java 와 jsp 환경에서 개발자가 좀 더 편안하게 프로젝트를 진행할 수 있도록 만들어 놓은 툴
- 스프링 개발 툴 : 기존의 이클립스에서 확장 프로그램을 설치
- inteliJ : 안드로이드 웹 개발에 주로 사용함
- STS(Spring Tool Suite) 전용 툴 : 이클립스 전용 툴
	-https://spring.io/tools

sts4 에서는 Spring Boot 만 지원
Spring Legacy project를 지원하지 않기 때문에 해당 기능을 추가해야 함
help -> 이클립스 마켓플레이스 -> Spring tools 검색 -> 3.~ 다운


http://mannaedu.com/bbs/board.php?bo_table=pds&wr_id=74

c -> 사용자 -> .m2 -> 리파지티 -> 라이브러리 파일이 들어있음


라이브러리 저장소 : http://mvnrepository.com
- 필요한 라이브러리는 복사해서 사용

----------------------------------------------------------------------------------------

# 스프링에서 다음과 같이 자동으로 검색해서 객체를 생성

@ Controller : 컨트롤러 빈 (메인 클래스가 됨)
@ Repository : dao (데이터베이스 관련 작업) 빈
@ Service : 서비스 (비즈니스 관련 로직) 빈
@ Inject : 의존성 관례 주입

----------------------------------------------------------------------------------------

# 스프링 디렉토리 구조

src/main/java : 자바 코드 (Controller, model, service)
src/main/resources : 자바 코드에서 참조하는 리소스 파일(sqlMapconfig.xml, mybits/mapper)
src/test/java : 테스트 관련 코드 
src/main/webapp : 웹 서비스 루트 디렉토리
src/main/webapp/resource : js, css, image 관련 웹 리소스 파일을 저장
src/main/webapp/WEB-INF/ : 외부에서 파일 경로나 디렉토리를 보지 못하게 제한을 걸어 둠
src/main/webapp/WEB-INF/views : html, jsp 문서 저장

----------------------------------------------------------------------------------------

Controller와 view 실습

1. MainController 클래스 작성
2. views 폴더 및에 jsp 파일 생성







